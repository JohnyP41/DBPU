//Kompilacja
s426228@lts:~/Desktop/DBPU/dbpu-l2/4$ gcc 1.c -o 1
s426228@pc01k:~/Desktop/DBPU/dbpu-l2/4$ gcc 2.c -m32 -o 2
2.c: Assembler messages:
2.c:7: Warning: using `%ax' instead of `%eax' due to `w' suffix
s426228@pc01k:~/Desktop/DBPU/dbpu-l2/4$ gcc 3.c -m32 -o 3
3.c: Assembler messages:
3.c:7: Warning: using `%ax' instead of `%eax' due to `w' suffix
3.c:8: Warning: using `%ax' instead of `%eax' due to `w' suffix
3.c:8: Warning: using `%ax' instead of `%eax' due to `w' suffix
s426228@pc01k:~/Desktop/DBPU/dbpu-l2/4$ gcc 4.c -m32 -o 4
4.c: Assembler messages:
4.c:8: Warning: using `%dx' instead of `%edx' due to `w' suffix
4.c:9: Warning: using `%ax' instead of `%eax' due to `w' suffix
4.c:9: Warning: using `%dx' instead of `%edx' due to `w' suffix
s426228@pc01k:~/Desktop/DBPU/dbpu-l2/4$ gcc 5.c -m32 -o 5
5.c: Assembler messages:
5.c:9: Warning: using `%dx' instead of `%edx' due to `w' suffix
5.c:10: Warning: using `%ax' instead of `%eax' due to `w' suffix
5.c:10: Warning: using `%dx' instead of `%edx' due to `w' suffix
s426228@pc01k:~/Desktop/DBPU/dbpu-l2/4$ gcc 6.c -m32 -o 6
s426228@pc01k:~/Desktop/DBPU/dbpu-l2/4$ gcc 7.c -m32 -o 7
s426228@pc01k:~/Desktop/DBPU/dbpu-l2/4$ gcc 8.c -m32 -o 8


//Uruchomienie
s426228@lts:~/Desktop/DBPU/dbpu-l2/4$ ./1
s426228@pc01k:~/Desktop/DBPU/dbpu-l2/4$ ./2
Wartość a: 0 przed wykonaniem 
I wartość tej samej zmiennej po wykonaniu 0
s426228@pc01k:~/Desktop/DBPU/dbpu-l2/4$ ./3
Wartość a: 0 b: 0 przed wykonaniem 
I wartość tych samych zmiennych po wykonaniu a: 0 b: 1
s426228@pc01k:~/Desktop/DBPU/dbpu-l2/4$ ./4
Wartość a: 0 b: 0 przed wykonaniem 
I wartość tych samych zmiennych po wykonaniu a: 1 b: -135135231
s426228@pc01k:~/Desktop/DBPU/dbpu-l2/4$ ./5
Wartość a: 0 b: 0 przed wykonaniem 
I wartość tych samych zmiennych po wykonaniu a: 1 b: -135331839
s426228@pc01k:~/Desktop/DBPU/dbpu-l2/4$ ./6
Wartość a: 0 b: 0 przed wykonaniem 
I wartość tych samych zmiennych po wykonaniu a: 1 b: 1
s426228@pc01k:~/Desktop/DBPU/dbpu-l2/4$ ./7
Wartość a: 0 b: 0 przed wykonaniem 
I wartość tych samych zmiennych po wykonaniu a: 1 b: 1
s426228@pc01k:~/Desktop/DBPU/dbpu-l2/4$ ./8
Segmentation fault

//Analiza kodu
1.
Program wykonuje instrukcję asemblerową 'nop', która nic nie robi.
2.
Zmienna 'a' została zadeklarowana jako wejściowa, można odwoływać się do niej za pomocą %0. Jeżeli chcemy z poziomu assemblera zmieniać zawartość zmiennych, musimy zadeklarować te zmienne w polu "Zmienne wyjściowe", poprzedzając je znakiem '='. Robimy to tak :
asm("..." :"=q" (a) ); 
3. 
Zmienna 'a' została zadeklarowana jako wejściowa. Ponieważ jest druga na liście więc odwołujemy się do niej przez %1. Zmienna 'b' jest jako wyjściowa więc efekty jej zmian będzie widać na zewnątrz instrukcji assemblerowej. Odwołujemy się do niej za pomocą %0, bo została zadeklarowana na pierwszym miejscu.
Załadowaliśmy liczbę '1' do zmiennej a (zmiany tej na zewnątrz nie widać, bo a jest tylko wejściowa) a potem zmiennej 'b' przypisaliśmy tymczasową wartość 'a'.
4.
Zmienna b została załadowana do któregoś z rejestrów 32 bitowych. My, instrukcją movw $1,%0 (która rozwinęła się do np movw $1,%eax) wprowadziliśmy tam 16 bitową liczbę. Czyli, zawartość ax będzie równa 1, a pozostała część eax będzie miało wartość nieokreśloną. 
5.
Wyczyściliśmy rejestr, który akurat przechowywał zmienną 'a', w związku z czym rejestr ten nie zawierał żadnych przypadkowych wartości.
6.
Powiedzieliśmy gcc, że ma traktować argumenty jako liczby 32-bitowe (movl zamiast movw). 
7.
Program jest lepszy niż poprzednie napisane w asemblerze. Przypisuje dla zmiennej b wartość 1, a następnie do zmiennej a wartość b, czyli 1.
8.
Trzeba było poprawić linię 14 aby program zaczął działać.


